package cz.spsmb.ctvrtak.f_pop.b_sudoku_game;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.SVGPath;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.Arrays;


class TfInfo {
    public final int row;
    public final int column;

    public TfInfo(int row, int column) {
        this.row = row;
        this.column = column;
    }
}

class Win {
    public Stage Win(Stage winW) {
        //winW.getIcons().add(new Image("logo.png"));
        winW.setTitle("Win");
        Label label = new Label("You win!! \n");
        label.setFont(new Font(24));
        StackPane root = new StackPane();
        SVGPath joker = new SVGPath();
        joker.setContent("M73.4375 0C61.34375 0 53.417969-1.867188 49.671875-5.609375 45.929688-9.355469 44.0625-17.28125 44.0625-29.375v-603.07812c0-12.08985 1.867188-20.00782 5.609375-23.75 3.746094-3.7461 11.671875-5.625 23.765625-5.625H510.625c12.08984 0 20.00781 1.8789 23.75 5.625 3.74609 3.74218 5.625 11.66015 5.625 23.75V-29.375c0 12.09375-1.87891 20.019531-5.625 23.765625C530.63281-1.867188 522.71484 0 510.625 0Zm5.1875-12.09375h426.8125c9.78906 0 15.98437-1.296875 18.57812-3.890625 2.58985-2.589844 3.89063-8.785156 3.89063-18.578125v-592.70312c0-10.36329-1.30078-16.69532-3.89063-19-2.59375-2.3086-8.78906-3.46875-18.57812-3.46875H78.625c-10.367187 0-16.707031 1.16015-19.015625 3.46875-2.304687 2.30468-3.453125 8.63671-3.453125 19V-34.5625c0 9.792969 1.148438 15.988281 3.453125 18.578125 2.308594 2.59375 8.648438 3.890625 19.015625 3.890625zm205.625-191.8125c-29.94922 0-45.21094-21.88281-45.78125-65.65625-7.49219 0-15.69922-2.01562-24.625-6.04687-8.92969-4.02735-13.39063-8.92579-13.39063-14.6875 0-7.48829 6.33204-11.23438 19-11.23438l13.82813-2.59375c6.33203-15.55078 9.5-33.98437 9.5-55.29687 0-4.02735-1.73047-6.04688-5.1875-6.04688-14.96875 0-25.05078 6.33594-30.23438 19 4.60157 1.73047 6.90625 5.76172 6.90625 12.09375 0 9.21875-6.33593 13.82813-19 13.82813-11.52343 0-17.28125-5.17969-17.28125-15.54688 0-7.48828 4.03125-12.09766 12.09375-13.82812 1.72657-10.94532 6.47657-20.59375 14.25-28.9375 7.77735-8.35157 17.42969-12.81641 28.95313-13.39063-10.36719-18.43359-23.61719-27.65625-39.75-27.65625-16.69922 0-25.91406 11.80859-27.64063 35.42188 6.90235 3.46093 10.35938 8.07031 10.35938 13.82812 0 4.60547-1.73047 8.63672-5.1875 12.09375-3.44922 3.46094-8.05469 5.1875-13.8125 5.1875-5.1875 0-9.80078-1.58203-13.82813-4.75-4.03125-3.16406-6.04687-7.05469-6.04687-11.67187 0-4.60157 1.4375-8.05469 4.3125-10.35938 2.88281-2.30078 4.61328-3.45312 5.1875-3.45312.58203-16.70704 5.19141-30.96094 13.82812-42.76563 8.63282-11.80859 21.88282-17.71875 39.75-17.71875 16.69532 0 33.11329 6.62891 49.25 19.875-.58593-2.88281-1.30859-6.34375-2.17187-10.375-.86719-4.02734-1.29688-8.34766-1.29688-12.95312l4.32813-40.60938-1.73438-12.96875c-6.90625-3.44531-10.35937-8.62891-10.35937-15.54687 0-11.51954 7.48437-17.28125 22.45312-17.28125 14.97657 0 22.46875 5.18359 22.46875 15.54687 0 8.64844-3.45703 13.83594-10.35937 15.5625 0 32.83594 6.04687 62.78906 18.14062 89.85938.57032-12.10157 3.73829-22.61719 9.5-31.54688 5.75782-8.92578 12.09766-16.84375 19.01563-23.75l18.14062-18.15625c5.17579-6.33203 7.76563-12.37891 7.76563-18.14062 0-8.63282-1.15234-14.10157-3.45313-16.40625h-1.71875c-9.21875 0-13.82812-4.32032-13.82812-12.96875 0-12.66407 8.0625-19 24.1875-19 16.70703 0 25.0625 5.47265 25.0625 16.40625 0 8.64843-3.46094 13.83593-10.375 15.5625l1.73437 12.95312c0 14.39844-6.05078 31.10156-18.14062 50.10938-11.52344 19.58593-18.14844 32.54296-19.875 38.875 13.24609-18.9961 31.96875-28.5 56.15625-28.5 16.12109 0 29.36719 5.18359 39.73437 15.54687 10.3711 10.36719 15.5625 22.17578 15.5625 35.42188l-2.59375 24.1875c5.1836 2.3125 7.78125 6.92578 7.78125 13.82812 0 11.52344-7.49218 17.28125-22.46875 17.28125-15.55468 0-23.32812-5.75781-23.32812-17.28125 0-10.93359 5.47266-16.40625 16.42187-16.40625l.85938-5.1875v-10.375c-.57422-5.17578-3.16797-10.92969-7.78125-17.26562-4.60547-6.33985-11.80469-9.51563-21.59375-9.51563-19.58594 0-29.375 12.09766-29.375 36.28125 0 5.76172 1.72656 12.67969 5.1875 20.75 3.44531 8.63672 5.17187 16.98828 5.17187 25.04688 0 15.55468-4.32031 29.08984-12.95312 40.60937-4.60547 29.375-13.39453 51.83984-26.35938 67.39063-12.96093 15.55468-28.08203 23.32812-45.35937 23.32812zm73.45312-107.14062c1.71485-4.02735 2.86329-8.0625 3.4375-12.09375.58204-4.02735.875-8.0625.875-12.09375 0-6.90235-1.73046-14.67969-5.1875-23.32813-3.46093-8.05859-5.1875-15.55078-5.1875-22.46875 0-13.23828 3.16407-23.74219 9.5-31.51562 6.33985-7.77735 15.27344-11.67188 26.79688-11.67188 12.08984 0 21.16016 3.60156 27.20312 10.79688 6.05079 7.19921 9.07813 14.83203 9.07813 22.89062l-2.59375 19.875 8.64062.85938c1.72657-8.0586 2.59375-17.27344 2.59375-27.64063 0-9.78906-3.89453-19.4375-11.67187-28.9375-7.77344-9.50781-19.43359-14.26562-34.98438-14.26562-17.85546 0-32.25781 5.33203-43.20312 15.98437C332.0625-414 326.01172-398.58984 324.85937-378.4375h-6.90625c0-18.42578 2.01563-33.53906 6.04688-45.34375 4.02734-11.80859 8.92578-22.32812 14.6875-31.54687l14.6875-23.32813c4.02734-6.33203 6.04687-15.54687 6.04687-27.64062l-1.71875-15.5625h-7.78125c1.72657 4.03125 2.59375 9.79296 2.59375 17.28125 0 9.21875-2.88281 16.42578-8.64062 21.60937l-19.01563 18.14063c-7.49218 7.49218-13.83203 15.98828-19.01562 25.48437-5.17969 9.5-7.76563 21.45703-7.76563 35.85938l12.96875 19-5.1875 3.45312c-10.375-13.82031-18.01171-25.33594-22.90625-34.54687-4.89843-9.21485-8.49609-17.85938-10.79687-25.92188-2.30469-8.05859-3.74609-17.27344-4.32813-27.64062-.57421-10.3711-1.72265-23.33594-3.4375-38.89063l-8.64062.85938 1.71875 19.875-4.3125 39.75 5.1875 32.82812c5.74609 5.76172 14.09766 16.99219 25.04687 33.6875l-5.1875 3.46875c-22.46093-39.74609-48.3789-59.625-77.75-59.625-14.40625 0-25.64453 5.33203-33.70312 15.98438-8.0625 10.65625-12.38281 23.76171-12.95313 39.3125l5.17188.85937c1.15234-12.66406 4.75391-23.46094 10.79687-32.39062 6.05079-8.92579 13.97266-13.39063 23.76563-13.39063 14.97656 0 27.9375 6.77344 38.875 20.3125 10.94531 13.53125 16.71094 28.94141 17.29687 46.21875 6.33204-2.88281 13.38282-5.04687 21.15625-6.48437 7.77735-1.4336 15.70313-2.15625 23.76563-2.15625 21.88281 0 38.00781 3.74609 48.375 11.23437 10.37109 7.48047 15.5625 19.86328 15.5625 37.14063zM201.3125-345.59375c2.87109-7.48828 7.47656-13.96875 13.8125-19.4375 6.33984-5.47656 13.54687-8.21875 21.60937-8.21875h3.45313l-3.45313-12.09375c-10.36718 0-19.58593 4.17969-27.65625 12.53125-8.0625 8.35547-12.66796 16.85156-13.8125 25.48438zM284.25-210.8125c14.97656 0 27.36328-5.89844 37.15625-17.70312 9.78906-11.8086 17.27344-26.35938 22.45312-43.64063 5.1836-17.27734 7.78125-33.41016 7.78125-48.39062 0-27.64454-19.00781-41.46875-57.01562-41.46875-13.82422 0-29.08984 3.46093-45.79688 10.375l-.85937 8.625 8.64062-2.57813c6.90235 0 10.35938 5.18359 10.35938 15.54688 0 10.94921-4.75391 19.58984-14.25 25.92187-9.5 6.33594-20.58984 9.5-33.26563 9.5-8.0625 0-12.09375 1.44531-12.09375 4.32813 0 3.44921 4.03125 6.61718 12.09375 9.5 8.0586 2.875 15.83594 4.3125 23.32813 4.3125 11.51953 0 21.3125-4.03125 29.375-12.09375l5.1875 5.1875c-8.0625 8.0625-18.72266 12.67578-31.96875 13.82812v6.90625l12.96875 1.73438c21.88281-.58204 39.16016-10.375 51.82812-29.375l4.32813-3.46875c2.87109 0 4.3125 2.88281 4.3125 8.64062 0 38.02344-16.70703 57.03125-50.10938 57.03125-6.33593 0-11.51953-1.44141-15.54687-4.32812 5.75781 14.40625 16.125 21.60937 31.09375 21.60937zm-4.3125-107.14062-2.59375-4.3125 6.04687-8.64063c4.60157-9.21484 8.77344-15.26562 12.51563-18.14062 3.74609-2.88282 8.21875-4.32813 13.40625-4.32813 4.60156 0 8.34766 1.44141 11.23437 4.3125L324-345.59375l-5.1875 3.45313-9.5-4.32813c-6.33594 0-13.53516 6.62891-21.59375 19.875zm-20.73438-6.90625v-1.73438l.85938-3.45312c0-5.75782-2.01953-8.64063-6.04688-8.64063l-6.90625 1.73438v2.57812l-.875 5.1875h3.46875c2.30079 0 5.46875 1.44531 9.5 4.32813zm31.09375 16.40625-6.04687-3.45313c8.64453-16.69531 17.86328-25.04687 27.65625-25.04687 8.63281 0 12.95312 4.03515 12.95312 12.09375 0 4.60546-2.88281 9.5039-8.64062 14.6875-1.73047-5.75782-4.32031-8.64063-7.76563-8.64063-3.46093 0-9.51171 3.45703-18.15625 10.35938zm-50.96875 3.46875 10.375-5.1875-6.0625-8.64063zm0 0");
        root.getChildren().add(label);
        root.getChildren().add(joker);
        winW.setScene(new Scene(root, 300, 250));
        return winW;
    }

}

public class Gui extends Application {
    @Override
    public void start(Stage stage) throws Exception {
        GridPane grid = new GridPane();
        grid.setStyle("-fx-border-color: black");
        Button checkRows = new Button("kontrola řádků");
        Button checkCols = new Button("kontrola sloupců");
        Button checkWins = new Button("kontrola oken");
        HBox hbox = new HBox(checkRows,checkCols,checkWins);
        VBox vbox = new VBox(hbox,grid);
        Sudoku sudoku = new Sudoku();
        sudoku.randomFill();
        sudoku.prepareForLevel(6);
        int[][] plocha = sudoku.getPlocha();


        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                TextField tf = new TextField();
                String style = "-fx-font-size:30px";
                if(plocha[row][col]==0){
                    style += "; -fx-text-fill: green";
                }else{
                    tf.setText(Integer.toString(plocha[row][col]));
                }
                int winIdx = (col/3)*3 + row/3;
                if (winIdx %2 == 0){
                    style+="; -fx-border-color: black";

                }
                tf.setPrefWidth(100);
                tf.setPrefHeight(100);
                tf.setStyle(style);
                tf.setAlignment(Pos.CENTER);
                tf.setUserData(new TfInfo(row,col));
                tf.setOnKeyTyped(new EventHandler<KeyEvent>() {
                    @Override
                    public void handle(KeyEvent keyEvent) {
                        System.out.println("Zadali jste: "+keyEvent.getCharacter());
                        ArrayList<String> kontrola = new ArrayList<>();
                        TextField currentTf = (TextField) keyEvent.getSource();
                        for (int i = 1; i < 10; i++) {
                            kontrola.add(Integer.toString(i));
                        }
                        if(kontrola.contains(keyEvent.getCharacter())){
                            System.out.println("ok");
                            vbox.requestFocus();
                            TfInfo ti = (TfInfo) currentTf.getUserData();
                            sudoku.getPlocha()[ti.row][ti.column] = Integer.valueOf(keyEvent.getCharacter());
                            if (sudoku.checkRows() && sudoku.checkCols()  && sudoku.checkWins() && sudoku.isZero()) {
                                Win win = new Win();
                                Stage plocha = win.Win(new Stage());
                                plocha.showAndWait();
                            }
                        }else{
                            System.out.println("neni ok");
                            currentTf.setText("");
                        };
                    }
                });
                grid.add(tf, col, row);
            }
        }

        checkRows.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                System.out.println(sudoku.checkRows());
            }
        });

        checkCols.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                System.out.println(sudoku.checkCols());
            }
        });

        checkWins.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                System.out.println(sudoku.checkWins());
            }
        });


        Scene scene = new Scene(vbox);
        stage.setScene(scene);
        stage.show();
    }

        public static void main(String[] args) {
            launch(args);
        }
    }

